'-------------Sequence of Main Routine for Original or Slim MSA/TG/VNA---------------
'Notes: The SLIM MSA (SLIM Control Board) can command all 6 modules at one time (PLO1,DDS1,PLO3,DDS3,PDM,FilterBank).
'        However, the FilterBank is commanded independently. So is PLO2.
'       The Original MSA (original Control Board) must command the modules independently.

'1.Establish User Global variables from external msaconfig.txt
'2.Establish hard Global variables
'3.Create Working Window, for Spectrum Analyzer Mode, and insert the Default Global Variables
'4.measure computer speed and update global, glitchtime
'5.Command Filter Bank to Path one
'   access the Path 1 Magnitude Calibration Table
'   access the MagError vs Freq Calibration Table
'6.if configured, initialize DDS3 by resetting to serial mode. Frequency is commanded to zero
'7.if configured, initialize PLO3. No frequency command yet.
'8.initialize and command PLO2 to proper frequency
'9.Initialize PLO 1. No frequency command yet.
'10.initialize DDS1 by reseting to serial mode. Frequency is commanded to zero
'11.[GrabWorkingWindowData] get info from Working Window and update variables
'12.[CreateGraphWindow], using Working Window data
'13.Calculate the command information for first step through last step of the sweep and put in arrays
'14.[StartSweep]'Begin sweeping from step 0
'15.[CommandThisStep](1.9ms). command relevant Control Board and modules
'16.Determine sequence of operations after commanding the modules
'    a. if in OneStep mode, then
'       add extra settling time
'       read data of thisstep. gosub [ReadStep]
'       process data of thisstep. gosub [ProcessAndPrint]
'       wait here, until the next button push
'    b. if ThisStep is the first step after a halt, then
'        add extra settling time
'        read data of thisstep. gosub [ReadStep]
'        goto [Scan]
'    c. if ThisStep is not the first step after halt (middle of sweep), then
'        process and print the Previous Step. gosub [ProcessAndPrintLastStep](3.8ms)
'           [ProcessAndPrint](3.8ms)                           /1.9
'               [ConvertMagPhaseData](2.5ms)                      /.53
'                   call calConvertMagPhase(1.2ms)
'                   freqerror=calConvertFreqError(thisfreq)(0.9ms)  /.085
'                   [CalcMagpowerPixel](0.4ms)
'               [PlotDataToScreen](1.3ms)                         /1.3
'        read data of thisstep. gosub [ReadStep](1.9ms)
'        goto [Scan]
'17.[Scan] Check to see if a button has been pushed
'   If a button was pushed (other than OneStep) goto [Halted]
'   If not, continue to [IncrementOneStep]
'18.[IncrementOneStep]
'   add 1 to the value of thisstep
'   if the new value of thisstep exceeds the number of steps in this sweep
'       "Glue" the full sweep plot into memory
'       go back to [StartSweep]
'   if not, go back to [CommandThisStep] and continue sweeping
'19.[Halted]
'   process and print ThisStep. gosub [ProcessAndPrint]
'   reprint Graph lines and text. gosub [PrintGraph]
'   "Glue" Graph into memory
'   wait for operator action.


[InitializeHardware]
    'These hardware initializations are performed on startup and usually repeated on Restart. The reason
    'they are repeated on Restart is to fix any hardware glitches that might occur. Whenever it is known
    'that a hardware change is made, such as filter selection changing, it is best to take action immediately,
    'and not rely on the Restart process. In some cases, Restart skips these initializations for speed.
    if suppressHardware=0 and cb<3 then  'ver115-6c USB:02-08-2010 added cb test
        out port, 0                 'begin with all data lines low
        if cb = 2 then  'ver116-1b
            out control, INITSELT 'latch "0" into SLIM Control Board Buffers 1 and 2
            out control, AUTO 'latch "0" into SLIM Control Board Buffers 3
            'We don't clear SLIM Buffer 4, because it controls among other things the latched switches
            'It was initialized near the beginning to make the PS line high.
        end if
        out control, contclear      'begin with all control lines low
    end if
    if (cb = 3) and (bUseUSB<>0) then 'USB:01-08-2010
        USBwrbuf$ = "A5010000" ' reset all lines low 'USB:01-08-2010
        if USBdevice <> 0 then CALLDLL #USB, "UsbMSADeviceWriteString", USBdevice as long, USBwrbuf$ as ptr, 4 as short, result as boolean 'USB:01-08-2010
    end if 'USB:01-08-2010
     'the following are meaningless values to guarantee first time commanding. Used in subroutine, [DetermineModule]
    lastdds1output = appxdds1:lastdds3output = appxdds3:lastpdmstate = 2 'ver111-28
    lastncounter1 = 0 : lastncounter3 = 0 'to guarantee Original MSA will command PLL's after init. ver114-6c
    error$="" : errora$=""  'ver115-1c

    'Initialize Final Filter path. 
    call CommandFilter filtbank   'Commands and sets filtbank. Does nothing if suppressHardware=1. ver115-6c

    call SelectVideoFilter  'reselect video filter in case a glitch got it 'ver116-1b
    'Note we don't reset the latched switches on Restart (for startup, they are set when prefs are loaded),
    'because it can get obnoxius and requires a time delay.
    'Plus, we don't want to set them when the user makes a change, and immediately set again on Restart.
    'These switches are properly set whenever DetectChanges is called, which should take care of them.
    'ver116-4d deleted call to SelectLatchedSwitches

'6.if configured, initialize DDS3 by reseting to serial mode. Frequency is commanded to zero
    if suppressHardware then goto [SkipHardwareInitialization]  'In case there is no hardware ver115-6c
    if TGtop = 0 then goto [endInitializeTrkGen]' there is no Tracking Generator ver111-22
    'Initialize DDS 3
        if cb = 0 and TGtop = 2 then Jcontrol = INIT:swclk = 32:sfqud = 2:gosub [ResetDDS3ser] 'ver111-7
        '[ResetDDS3ser]needs:port,control,Jcontrol,swclk,sfqud,contclear ; resets DDS3 into Serial mode
        if cb = 2 then gosub [ResetDDS3serSLIM] 'ver111-29
        if cb = 3 then gosub [ResetDDS3serUSB]  'USB:01-08-2010
'7.if configured, initialize PLO3. No frequency command yet.
    'Initialize PLL 3. 'CreatePLL3R,CommandPLL3R
        appxpdf=PLL3phasefreq 'ver111-4
        if TGtop = 1 then reference=masterclock 'ver111-4
        if TGtop = 2 then reference=appxdds3 'ver111-4
        gosub [CreateRcounter]'needs:reference,appxpdf ; creates:rcounter 'ver111-14
        rcounter3=rcounter : pdf3=pdf 'ver111-7
    'CommandPLL3R and Init Buffers
        datavalue = 8:levalue = 4 'PLL3 data and le bit values ver111-28
        gosub [CommandPLL3R]'needs:PLL3mode,PLL3phasepolarity,INIT,PLL3 ; Initializes and commands PLL3 R Buffer(s) 'ver111-7
[endInitializeTrkGen]   'skips to here if no TG

'8.initialize and command PLO2 to proper frequency
    'CreatePLL2R
        appxpdf=PLL2phasefreq 'ver111-4
        reference=masterclock 'ver111-4
        gosub [CreateRcounter]'needed:reference,appxpdf ; creates:rcounter,pdf 'ver111-14
        rcounter2 = rcounter 'ver111-7
        pdf2 = pdf    'actual phase detector frequency of PLL 2 'ver111-7
    'CommandPLL2R and Init Buffers
        datavalue = 16: levalue = 16 'PLL2 data and le bit values ver111-28
        gosub [CommandPLL2R]'needs:PLL2phasepolarity,SELT,PLL2 ; Initializes and commands PLL2 R Buffer(s)
    'CreatePLL2N
        appxVCO = appxLO2 : reference = masterclock
        gosub [CreateIntegerNcounter]'needs:appxVCO,reference,rcounter ; creates:ncounter,fcounter(0)
        ncounter2 = ncounter:fcounter2 = fcounter
        gosub [CreatePLL2N]'needs:ncounter,fcounter,PLL2 ; returns with Bcounter,Acounter, and N Bits N0-N23
        Bcounter2=Bcounter: Acounter2=Acounter
        LO2=((Bcounter*preselector)+Acounter+(fcounter/16))*pdf2 'actual LO2 frequency  'ver115-1c LO2 is now global
    'CommandPLL2N
        Jcontrol = SELT : LEPLL = 8
        datavalue = 16: levalue = 16 'PLL2 data and le bit values ver111-28
        gosub [CommandPLL]'needs:N23-N0,control,Jcontrol,port,contclear,LEPLL ; commands N23-N0,old ControlBoard ver111-5

'9.Initialize PLO 1. No frequency command yet.
    '[InitializePLL1]'set PLL1 to proper Rcount and initialize
'        appxpdf=PLL1phasefreq 'ver111-4
'        reference=appxdds1 'ver111-4
'        gosub [CreateRcounter]'needed:reference,appxpdf ; creates:rcounter,pdf 'ver111-4
'        rcounter1 = rcounter 'ver111-4
        'Create rcounter1 ver114-2e
    rcounter1=int(appxdds1/PLL1phasefreq)   'ver114-2e
    if (appxdds1/PLL1phasefreq) - rcounter1 >= 0.5 then rcounter1 = rcounter1 + 1   'rounds off rcounter  ver114-2e
    if spurcheck=1 and PLL1mode=0 then rcounter1 = rcounter1 +1 'only do this for IntegerN PLL  ver114-2e

    'CommandPLL1R and Init Buffers
    datavalue = 2: levalue = 1 'PLL1 data and le bit values ver111-28
    gosub [CommandPLL1R]'needs:rcounter1,PLL1mode,PLL1phasepolarity,SELT,PLL1 ; Initializes and commands PLL1 R Buffer(s)

'10.initialize DDS1 by resetting. Frequency is commanded to zero
    'It should power up in parallel mode, but could power up in a bogus condition.
    if cb = 0 and dds1parser = 0 then gosub [ResetDDS1par]'(Orig Control)'needs:control,STRBAUTO,contclear ; resets DDS1 on J5, parallel ver111-21
    if cb = 0 and dds1parser = 1 then gosub [ResetDDS1ser]'(Orig Control)'needed:control,AUTO,STRB,contclear  ; resets DDS1 on J5, into serial mode ver111-21
    if cb = 2 then gosub [ResetDDS1serSLIM]'reset serial DDS1 without disturbing Filter Bank or PDM 'ver111-29
    if cb = 3 then gosub [ResetDDS1serUSB]'reset serial DDS1 without disturbing Filter Bank or PDM  'USB:01-08-2010
    
    '13.Calculate the command information for first step through last step of the sweep and put in arrays
    cursor hourglass    'ver116-4k
    if suppressHardware then    'ver115-6c
            'These are taken from the routines we are skipping
        for i=0 to steps
            thisfreq=gGetPointXVal(i+1)    'Point number is 1 greater than step number SEWgraph
            if msaMode$<>"SA" then  'Store actual signal freq in VNA arrays ver116-1b
                if msaMode$="Reflection" then ReflectArray(thisstep,0)=thisfreq _
                                else S21DataArray(thisstep,0)=thisfreq
            end if
            if FreqMode<>1 then thisfreq=Equiv1GFreq(thisfreq)  'Convert from display freq to equivalent 1G frequency
            datatable(i,0) = thisstep    'put current step number into the array, row value= thisstep 'moved ver111-18
            datatable(i,1) = thisfreq
            phaarray(i,0) = 0   'pdm state
        next i
    else    'Do these only if we are using the hardware 'ver115-6c
        gosub [CalculateAllStepsForLO1Synth] 'ver111-18
        if TGtop > 0 then gosub [CalculateAllStepsForLO3Synth] 'ver111-18
        gosub [CreateCmdAllArray] 'ver111-31b
    end if
    call CalcFreqCorrection     'Calculate power correction at each frequency SEWgraph1
    cursor normal   'ver116-4k
    if msaMode$="SA" and frontEndActiveFilePath$<>"" then call frontEndInterpolateToScan  'Calculate corrections for front end ver115-9d
    continueCode=0    'SEWgraph Set to other values by subroutines to cause halt, wait or restart

'14.[StartSweep]'Begin sweeping from step 0
'StartSweep begins the outer loop that repeats the entire scan process until halted.
'The scan loop continues until a user action which aborts the scan, or in the case of
'OneStep it continues only for a single point. If specialOneSweep=1 or HaltAtEnd=1, it
'automatically stops at the end of a single sweep.
    scanResumed=0 'used to indicate whether we start with a new scan(0) or resume where we left off(1)SEW
    haltedAfterPartialRestart=0 'May get set to 1 a few lines below. 116-1b
    'ver114-6e Normally, refresh will occur at end of scan only if halted or refreshEachScan=1,
    'and will be done by expedited methods. But if the user makes certain changes, the following
    'variables are used to force more extensive redrawing.
    call mDeleteMarker "Halt"    'ver114-4h moved the -4d version
    suppressSweepTime=1     'to suppress it for the first scan ver114-4h
        'if we just want to go through the initialization procedure we set returnBeforeFirstStep
        'and invoke [Restart] with a gosub; here we return to the caller

        'Save some sweep settings for reflection and transmission for use when changing
        'back to a previously used mode, so we know the nature of the last gathered data
    if msaMode$="Reflection" then   'ver116-1b
        refLastSteps=steps : refLastStartFreq=startfreq : refLastEndFreq=endfreq : refLastIsLinear=gGetXIsLinear()
        refLastGraphR0=S11GraphR0
        refLastY1Type=Y1DataType : refLastY1Top=Y1Top : refLastY1Bot=Y1Bot : refLastY1AutoScale=autoScaleY1
        refLastY2Type=Y2DataType : refLastY2Top=Y2Top : refLastY2Bot=Y2Bot : refLastY2AutoScale=autoScaleY2
        for i=1 to 4 : refLastTitle$(i)=gGetTitleLine$(i) : next i
    else
        if msaMode$="VectorTrans" then
            transLastSteps=steps : transLastStartFreq=startfreq : transLastEndFreq=endfreq : transLastIsLinear=gGetXIsLinear()
            transLastGraphR0=S21JigR0
            transLastY1Type=Y1DataType : transLastY1Top=Y1Top : transLastY1Bot=Y1Bot : transLastY1AutoScale=autoScaleY1
            transLastY2Type=Y2DataType : transLastY2Top=Y2Top : transLastY2Bot=Y2Bot : transLastY2AutoScale=autoScaleY2
            for i=1 to 4 : transLastTitle$(i)=gGetTitleLine$(i) : next i
        end if
    end if

    if returnBeforeFirstStep then   'ver115-2a
        thisstep=sweepStartStep
        returnBeforeFirstStep=0
        haltedAfterPartialRestart=1 'ver116-1b
        gosub [CleanupAfterSweep]
        return    'ver115-1d
    end if


'15.[CommandThisStep]. command relevant Control Board and modules
'SEW CommandThisStep begins the inner loop that moves from step to step to complete a single
'SEW scan.This branch label is accessed only from the end of the loop.
[CommandThisStep]'needs:thisstep ; commands PLL1,DDS1,PLL3,DDS3,PDM 'ver111-7
    'a. first, check to see if any or all the 5 module commands are necessary [DetermineModule]
    'b. calculate how much delay is needed for each module[DetermineModule], but use only the largest one[WaitStatement].
    'c. send individual data, clocks, and latch commands that are necessary for[CommandOrigCB]
      'or for SLIM, use [CommandAllSlims] for commanding concurrently 'ver111-31c
    gosub [CommandCurrentStep]  'ver116-4j made this a separate routine

'16.Determine sequence of operations after commanding the modules
    if onestep = 1 then  'in the One Step mode
        glitchhlt = 10 'add extra settling time
        gosub [ReadStep] 'read this step
        gosub [ProcessAndPrint] 'process and print this step
        call DisplayButtonsForHalted    'ver114-4f replaced call to [UpdateBoxes]
        call mAddMarker "Halt", thisstep+1, "1"   'ver114-4d
            'If marker is shown on graph, we need to redraw the whole graph
            'Otherwise just redraw the marker info
        if doGraphMarkers then call RefreshGraph 0 else call mDrawMarkerInfo  'No erasure gap in redraw ver114-5m
        if thisstep=sweepEndStep then
            'Note reversal is after graph is redrawn
            if alternateSweep then gosub [ReverseSweepDirection] 'ver114-4m; ver114-5e
            haltWasAtEnd=1  'ver114-5c
        else
            haltWasAtEnd=0  'ver114-5c
        end if
        wait 'wait here for next button push ver113-6d
    end if

    if haltsweep = 0 then 'in first step after a Halt
        haltsweep = 1 'change flag to say we are not in first step after a Halt, for future steps
        glitchhlt = 10  'add extra settling time
        gosub [ReadStep] 'read this step 'ver113-6d
    else  'if neither, then in middle of sweep. process and print the previous step, then read this step
        gosub [ProcessAndPrintLastStep]
        gosub [ReadStep]'read this step 'ver113-6d
    end if
        'ver116-4k moved sweep time here, so it prints after any refresh action from the prior scan
    if displaySweepTime and thisstep=sweepStartStep then
        currTime=Time$("ms")
        if suppressSweepTime=0 then _
                message$= "Sweep Time=";using("####.##", (currTime-startTime)/1000);" sec." : call PrintMessage   'ver114-4h
        suppressSweepTime=0 'Only suppress on first scan 'ver114-4h
        startTime=currTime       'SEWgraph timer for testing
    end if
    
    [CommandCurrentStep]'needs:thisstep ; commands PLL1,DDS1,PLL3,DDS3,PDM 'ver111-7
    'a. first, check to see if any or all the 5 module commands are necessary [DetermineModule]
    'b. calculate how much delay is needed for each module[DetermineModule], but use only the largest one[WaitStatement].
    'c. send individual data, clocks, and latch commands that are necessary for[CommandOrigCB]
      'or for SLIM, use [CommandAllSlims] for commanding concurrently 'ver111-31c
    if suppressHardware=0 then 'ver115-6c
        gosub [DetermineModule] 'determine which, if any, module needs commanding.  ver111-27
        cmdneeded = glitchp1 + glitchd1 + glitchp3 + glitchd3 + glitchpdm 'ver111-38a
        if cmdneeded > 0 and cb = 0 then gosub [CommandOrigCB]'old Control (150 usec, 0 SW) 'ver111-28ver111-38a
        'if cb = 1 then gosub [CommandRevB]'old Control looking like SLIM  'not created yet
        if cmdneeded > 0 and cb = 2 then gosub [CommandAllSlims]'ver111-38a
        if cmdneeded > 0 and cb = 3 then gosub [CommandAllSlimsUSB] 'USB:01-08-2010
        if cftest=1 then gosub [CommandLO2forCavTest] 'cav ver116-4c
    end if
return

[DetermineModule] 'ver111-28
    'All "glitchXX's" are "0" when entering this subroutine. Either from "fresh RUN" or [WaitStatement]
    'if a module is not present, or if it doesn't need commanding, return with it's "glitchXX = 0"
  '[DDS1]
    dds1output = DDS1array(thisstep,46) 'ver111-16
    if dds1output = lastdds1output then goto [PLL1] 'dds 1 is same, don't waste time commanding 'ver111-28
    glitchd1 = 1 'ver111-36h
    lastdds1output = dds1output
  [PLL1]
    ncounter1=PLL1array(thisstep,45):fcounter1=PLL1array(thisstep,46) 'ver111-16
    if ncounter1=lastncounter1 and fcounter1=lastfcounter1 then goto [PLL3] 'don't waste time commanding 'ver111-28
    glitchp1 = 1 'add 1 msec delay. ver111-28
    lastncounter1=ncounter1:lastfcounter1=fcounter1 'ver111-16
  [PLL3]
    if  TGtop = 0 then return 'there is no PLL 3, no DDS 3,and no PDM for VNA
    ncounter3=PLL3array(thisstep,45):fcounter3=PLL3array(thisstep,46)
    if ncounter3=lastncounter3 and fcounter3=lastfcounter3 then goto [DDS3] 'don't waste time commanding 'ver111-28
    glitchp3 = 1 'add 1 msec delay. ver111-28
    lastncounter3=ncounter3:lastfcounter3=fcounter3
  [DDS3]
    if appxdds3 = 0 then goto [PDM] 'if 0, there is no DDS3, but, there can be VNA ver111-28
    dds3output = DDS3array(thisstep,46)
    if dds3output = lastdds3output then goto [PDM] 'dds 3 is same, don't waste time commanding 'ver111-29
    glitchd3 = 1 'ver111-36h
    lastdds3output = dds3output
  [PDM]
    if suppressPhase or msaMode$="SA" or msaMode$="ScalarTrans" then return ' not in VNA mode, skip the PDM 'ver116-1b
    pdmcmd = phaarray(thisstep,0) 'ver111-39d
    if pdmcmd = lastpdmstate then return 'don't waste time commanding
    gosub [VideoGlitchPDM]  'ver114-6c
    'lastpdmstate = pdmcmd  'delver114-6c we won't update "lastpdmstate" until it is actually commanded
    return 'to [CommandThisStep]


[CreateRcounter]'needed:reference,appxpdf ; creates:rcounter,pdf 'ver111-4
    rcounter = int(reference/appxpdf) 'ver111-4
    if (reference/appxpdf) - rcounter >= .5 then rcounter = rcounter + 1   'rounds off rcounter 'ver111-4
    pdf = reference/rcounter 'ver111-4
    return 'to (Initialize PLL 3),[InitializePLL2],or[InitializePLL1]with rcounter,pdf 'ver111-4


[CreateIntegerNcounter]'needed:appxVCO,reference,rcounter ; creates:ncount,ncounter,fcounter(0),pdf
    ncount = appxVCO/(reference/rcounter)  'approximates the Ncounter for PLL
    ncounter = int(ncount)     'approximates the ncounter for PLL
    if ncount - ncounter >= .5 then ncounter = ncounter + 1   'rounds off ncounter
    fcounter = 0
    pdf = appxVCO/ncounter        'actual phase freq of PLL
    return  'to 'CreatePLL2N,'[CalculateThisStepPLL1],or '[CalculateThisStepPLL3] with ncount, ncounter and fcounter(=0)

\
[CommandDDS1]'ver111-36b. ver113-4a
    'this will recalculate DDS1, using the values in the Command DDS 1 Box, and "with DDS Clock at" Box.
    'it will insert the new DDS 1 frequency into the command arrays for all steps, leaving others alone
    'it will initiate a re-command at thisstep (where the sweep was halted)
      'if Original Control Board is used, only the DDS 1 is re-commanded. ver113-4a
      'if SLIM Control Board is used, all 4 modules will be re-commanded. ver113-4a
    'using One Step or Continue will retain the new DDS1 frequency.
    'PLO1 will be non-functional until [Restart] button is clicked. PLL1 will break lock and "slam" to extreme.
    '[Restart] will reset arrays and begin sweeping at step 0. Special Tests Window will not be updated.
    'Signal Generator or Tracking Generator output will not be effected.
    'caution, do not enter a frequency that is higher than 1/2 the masterclock frequency (ddsclock)
    print #special.dds1out, "!contents? dds1out$";   'grab contents of Command DDS 1 Box
    ddsoutput = val(dds1out$) 'intended output frequency of DDS 1
    print #special.masclkf, "!contents? msclk$";   'grab contents of "with DDS Clock at" box
    msclk = val(msclk$) 'if "with DDS Clock at" box was not changed, this is the real MasterClock frequency
    ddsclock = msclk
    'caution: if ddsoutput >= to .5 ddsclock, the program will error out
    gosub [CreateBaseForDDSarray]'needed:ddsoutput,ddsclock ; creates: base,sw0thrusw39,w0thruw4
    remember = thisstep 'remember where we were when entering this subroutine
    for thisstep = 0 to steps 'ver112-2a
    gosub [FillDDS1array]'need thisstep,sw0-sw39,w0-w4,base,ddsclock
    next thisstep 'ver112-2a
    thisstep = remember 'ver112-2a
    gosub [CreateCmdAllArray] 'ver112-2a
    if cb = 0 then gosub [CommandDDS1OrigCB]'will command DDS 1, only
'delver113-4a    if cb = 2 then gosub [CommandDDS1SlimCB]'will command DDS 1, only
    if cb = 2 then gosub [CommandAllSlims]'will command all 4 modules. ver113-4a
    if cb = 3 then gosub [CommandAllSlimsUSB]'will command all 4 modules. ver113-4a 'USB:01-08-2010
    wait

[CommandDDS3]'ver111-38a
    'this will recalculate DDS3, using the values in the Command DDS 3 Box, and "with DDS Clock at" Box.
    'it will insert the new DDS 3 frequency into the command arrays for all steps, leaving others alone
    'it will initiate a re-command at thisstep (where the sweep was halted)
      'only the DDS 3 is re-commanded
    'using One Step or Continue will retain the new DDS3 frequency.
    'PLO3 will be non-functional until [Restart] button is clicked. PLL3 will break lock and "slam" to extreme.
    '[Restart] will reset arrays and begin sweeping at step 0. Special Tests Window will not be updated.
    'Signal Generator or Tracking Generator output will be non functional.
    'Spectrum Analyzer function is not effected
    'caution, do not enter a frequency that is higher than 1/2 the masterclock frequency (ddsclock)
    print #special.dds3out, "!contents? dds3out$";   'grab contents of Command DDS 3 Box
    ddsoutput = val(dds3out$) 'intended output frequency of DDS 3
    print #special.masclkf, "!contents? msclk$";   'grab contents of "with DDS Clock at" box
    msclk = val(msclk$) 'if "with DDS Clock at" box was not changed, this is the real MasterClock frequency
    ddsclock = msclk
    'caution: if ddsoutput >= to .5 ddsclock, the program will error out
    gosub [CreateBaseForDDSarray]'needed:ddsoutput,ddsclock ; creates: base,sw0thrusw39,w0thruw4
    remember = thisstep 'remember where we were when entering this subroutine
    for thisstep = 0 to steps
    gosub [FillDDS3array]'need thisstep,sw0-sw39,w0-w4,base,ddsclock
    next thisstep
    thisstep = remember
    gosub [CreateCmdAllArray]
    if cb = 0 then gosub [CommandDDS3OrigCB]'will command DDS 3, only
'delver113-4a    if cb = 2 then gosub [CommandDDS3SlimCB]'will command DDS 3, only
    if cb = 2 then gosub [CommandAllSlims]'will command all 4 modules. ver113-4a
    if cb = 3 then gosub [CommandAllSlimsUSB]'will command all 4 modules. ver113-4a 'USB:01-08-2010
    wait

[DDS3Track]'ver111-39d
    'This uses DDS3 as a Tracking Generator, but is limited to 0 to 32 MHz, when MasterClock is 64 MHz
    'DDS3 spare output is rich in harmonics and aliases.
    'Tracks the values in Working Window, Center Frequency and Sweep Width (already in the command arrays)
    'The Spectrum Analyzer function is not effected.
    'PLO3, Normal Tracking Generator, and Phase portion of VNA will be non-functional
    'Operation:
    'In Working Window, enter Center Frequency to be within 0 to 32 (MHz), or less than 1/2 the MasterClock
    'In Working Window, enter Sweep Width (in MHz). But, do not allow sweep to go below 0 or abov 1/2 MasterClock
    'Click [Restart], then halt.
    'In Special Tests Window, click [DDS 3 Track].  DDS 3 will, immediately, re-command to new frequency.
    'Click [Continue]. Sweep will resume, but with DDS 3 tracking the Spectrum Analalyzer
    '[One Step] and [Continue] and halting operates normally until [Restart] button is pressed.
    '[Restart] will reset arrays, and leave the DDS 3 Track Mode. ie, normal sweeping.
    ddsclock = masterclock
    remember = thisstep
    for thisstep = 0 to steps
    ddsoutput = datatable(thisstep,1)
    'caution: if ddsoutput >= to .5 ddsclock, the program will error out
    gosub [CreateBaseForDDSarray]'needed:ddsoutput,ddsclock ; creates: base,sw0thrusw39,w0thruw4
    gosub [FillDDS3array]'need thisstep,sw0-sw39,w0-w4,base,ddsclock
    next thisstep
    thisstep = remember
    gosub [CreateCmdAllArray]
    if cb = 0 then gosub [CommandDDS3OrigCB]'will command DDS 3, only
    if cb = 2 then gosub [CommandAllSlims]'will command all 4 modules. ver113-4a
    if cb = 3 then gosub [CommandAllSlimsUSB]'will command all 4 modules. 'USB:01-08-2010
    wait

[DDS1Sweep]'ver112-2c
    'This forces the DDS 1 to the values in Working Window: Center Frequency and Sweep Width (already in the command arrays)
    'DDS1 spare output is rich in harmonics and aliases.
    'PLO1, and thus, the Spectrum Analyzer will be non-functional in this mode.
    'Signal Generator or Tracking Generator output will not be affected.
    'Operation:
    'In Working Window, enter Center Frequency to be within 0 to 32 (MHz), or less than 1/2 the MasterClock
    'In Working Window, enter Sweep Width (in MHz). But, do not allow sweep to go below 0 or abov 1/2 MasterClock
    'Click [Restart], then halt.
    'In Special Tests Window, click [DDS 1 Sweep].  DDS 1 will, immediately, re-command to new frequency.
    'Click [Continue]. Sweep will resume, but with DDS 1 sweeping.
    '[One Step] and [Continue] and halting operates normally until [Restart] button is pressed.
    '[Restart] will reset arrays, and will leave the DDS 1 Sweep Mode. ie, normal sweeping.
    ddsclock = masterclock
    remember = thisstep
    for thisstep = 0 to steps
    ddsoutput = datatable(thisstep,1)
    'caution: if ddsoutput >= to .5 ddsclock, the program will error out
    gosub [CreateBaseForDDSarray]'needed:ddsoutput,ddsclock ; creates: base,sw0thrusw39,w0thruw4
    gosub [FillDDS1array]'need thisstep,sw0-sw39,w0-w4,base,ddsclock
    next thisstep
    thisstep = remember
    gosub [CreateCmdAllArray]
    if cb = 0 then gosub [CommandDDS1OrigCB]'will command DDS 1, only
    if cb = 2 then gosub [CommandAllSlims]'will command all 4 modules. ver113-4a
    if cb = 3 then gosub [CommandAllSlimsUSB]'will command all 4 modules.  'USB:01-08-2010 moved ver116-4f
    wait

